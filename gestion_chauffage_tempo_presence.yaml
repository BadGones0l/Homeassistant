blueprint:
  name: Gestion avancée du chauffage avec EDF Tempo, présence, fenêtres et notifications (Preset Modes)
  description: >
    Contrôle des chauffages de plusieurs pièces en fonction de la présence, des jours Tempo (EDF),
    des horaires (réveil, journée, soirée, nuit), de l'état des fenêtres et avec notifications.
  domain: automation
  input:
    climate_entities:
      name: Thermostats
      description: Liste des entités des thermostats des pièces
      selector:
        target:
          entity:
            domain: climate
    presence_group:
      name: Groupe de présence
      description: Entité représentant la présence des occupants
      default: group.all_person
      selector:
        entity:
          domain: group
    tempo_sensor:
      name: Capteur EDF Tempo
      description: Entité représentant la couleur actuelle Tempo
      default: sensor.rte_tempo_couleur_actuelle
      selector:
        entity:
          domain: sensor
    window_sensors:
      name: Capteurs de fenêtre
      description: Entité représentant l'état des fenêtres
      selector:
        entity:
          domain: binary_sensor
    notification_service:
      name: Service de notification
      description: "Service utilisé pour envoyer les notifications"
      default: notify.notify
      selector:
        text:
    notification_title:
      name: Titre de la notification
      description: "Titre à utiliser dans les notifications"
      default: "Chauffage"
      selector:
        text:
    preset_presence:
      name: Mode en cas de présence (hors jours rouges)
      selector:
        select:
          options:
            - none
            - frost
            - eco
            - comfort
            - boost
    preset_wake:
      name: Mode au réveil
      selector:
        select:
          options:
            - none
            - frost
            - eco
            - comfort
            - boost
    preset_evening:
      name: Mode soirée (entre début soirée et début nuit)
      selector:
        select:
          options:
            - none
            - frost
            - eco
            - comfort
            - boost
    preset_night:
      name: Mode nuit (entre début nuit et début journée)
      selector:
        select:
          options:
            - none
            - frost
            - eco
            - comfort
            - boost
    preset_absence:
      name: Mode en cas d'absence
      selector:
        select:
          options:
            - none
            - frost
            - eco
            - comfort
            - boost
    preset_red_day:
      name: Mode jours rouges
      selector:
        select:
          options:
            - none
            - frost
            - eco
            - comfort
            - boost
    time_wake:
      name: Réveil
      default: "06:15"
      selector:
        time:
    time_morning:
      name: Début journée
      default: "08:00"
      selector:
        time:
    time_evening:
      name: Début soirée
      default: "19:00"
      selector:
        time:
    time_night:
      name: Début nuit
      default: "23:00"
      selector:
        time:

trigger:
  - platform: state
    entity_id: !input presence_group
  - platform: state
    entity_id: !input tempo_sensor
  - platform: state
    entity_id: !input window_sensors
  - platform: time
    at:
      - !input time_night
      - !input time_morning
      - !input time_evening
      - !input time_wake

condition: []

action:
  - choose:
      # Fenêtres ouvertes - désactiver le chauffage + notification
      - conditions:
          - condition: state
            entity_id: !input window_sensors
            state: "on"
        sequence:
          - service: climate.turn_off
            target: !input climate_entities
          - service: !input notification_service
            data:
              title: !input notification_title
              message: "Chauffage désactivé : Fenêtre ouverte."
          
      # Jour rouge - appliquer mode réduit + notification unique par jour
      - conditions:
          - condition: state
            entity_id: !input tempo_sensor
            state: "Rouge"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: template
            value_template: >
              {% set last_triggered = this.last_triggered %}
              {% if last_triggered is not none %}
                {{ (now() - last_triggered).days > 0 }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              preset_red: !input preset_red_day
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_preset_mode
            data:
              preset_mode: !input preset_red_day
            target: !input climate_entities
          - service: !input notification_service
            data:
              title: !input notification_title
              message: >
                Jour rouge EDF : mode réduit appliqué ({{ preset_red }}).

      # Réveil (entre time_wake et time_morning) - notification changement d'état
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "home"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: time
            after: !input time_wake
            before: !input time_morning
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_preset_mode
            data:
              preset_mode: !input preset_wake
            target: !input climate_entities
          - service: !input notification_service
            data:
              title: !input notification_title
              message: "Changement d'état : mode réveil appliqué."

      # Journée (entre time_morning et time_evening) - notification changement d'état
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "home"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: time
            after: !input time_morning
            before: !input time_evening
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_preset_mode
            data:
              preset_mode: !input preset_presence
            target: !input climate_entities
          - service: !input notification_service
            data:
              title: !input notification_title
              message: "Changement d'état : mode journée appliqué."

      # Soirée (entre time_evening et time_night) - notification changement d'état
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "home"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: time
            after: !input time_evening
            before: !input time_night
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_preset_mode
            data:
              preset_mode: !input preset_evening
            target: !input climate_entities
          - service: !input notification_service
            data:
              title: !input notification_title
              message: "Changement d'état : mode soirée appliqué."

      # Nuit (entre time_night et time_morning) - notification changement d'état
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "home"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: time
            after: !input time_night
            before: !input time_morning
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_preset_mode
            data:
              preset_mode: !input preset_night
            target: !input climate_entities
          - service: !input notification_service
            data:
              title: !input notification_title
              message: "Changement d'état : mode nuit appliqué."

      # Absence - appliquer mode réduit + notification changement d'état
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "not_home"
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_preset_mode
            data:
              preset_mode: !input preset_absence
            target: !input climate_entities
          - service: !input notification_service
            data:
              title: !input notification_title
              message: "Absence détectée : mode réduit appliqué."

    default: []

mode: single
