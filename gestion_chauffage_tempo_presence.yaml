blueprint:
  name: Gestion avancée du chauffage avec EDF Tempo, présence, fenêtres et notifications
  description: >
    Contrôle des chauffages de plusieurs pièces en fonction de la présence, des jours Tempo (EDF),
    des horaires (réveil, journée, soirée, nuit), de l'état des fenêtres et avec notifications.
  domain: automation
  input:
    climate_entities:
      name: Thermostats
      description: Liste des entités des thermostats des pièces
      selector:
        target:
          entity:
            domain: climate
    presence_group:
      name: Groupe de présence
      description: Entité représentant la présence des occupants
      default: group.all_person
      selector:
        entity:
          domain: group
    tempo_sensor:
      name: Capteur EDF Tempo
      description: Entité représentant la couleur actuelle Tempo
      default: sensor.rte_tempo_couleur_actuelle
      selector:
        entity:
          domain: sensor
    window_sensors:
      name: Capteurs de fenêtre
      description: Entité représentant l'état de la fenêtres
      selector:
        entity:
          domain: binary_sensor
    notification_service:
      name: Service de notification
      description: "Service utilisé pour envoyer les notifications"
      default: notify.notify
      selector:
        text:
    temp_presence:
      name: Température en cas de présence (hors jours rouges)
      default: 18.5
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    temp_wake:
      name: Température au réveil
      default: 18.5
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    temp_evening:
      name: Température soirée (entre début soirée et début nuit)
      default: 19
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    temp_night:
      name: Température nuit (entre début nuit et début journée)
      default: 16.5
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    temp_absence:
      name: Température en cas d'absence
      default: 15
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    temp_red_day:
      name: Température jours rouges
      default: 16
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    default_temp:
      name: Température par défaut
      description: Température appliquée si aucune condition n'est remplie
      default: 17
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    time_wake:
      name: Réveil
      default: "06:15"
      selector:
        time:
    time_morning:
      name: Début journée
      default: "08:00"
      selector:
        time:
    time_evening:
      name: Début soirée
      default: "19:00"
      selector:
        time:
    time_night:
      name: Début nuit
      default: "23:00"
      selector:
        time:

trigger:
  - platform: state
    entity_id: !input presence_group
  - platform: state
    entity_id: !input tempo_sensor
  - platform: state
    entity_id: !input window_sensors
  - platform: time
    at:
      - !input time_night
      - !input time_morning
      - !input time_evening
      - !input time_wake

condition: []

action:
  - choose:
      # Fenêtres ouvertes - désactiver le chauffage + notification
      - conditions:
          - condition: state
            entity_id: !input window_sensors
            state: "on"
        sequence:
          - service: climate.turn_off
            target: !input climate_entities
          - service: !input notification_service
            data:
              message: "Chauffage désactivé : Fenetre ouverte."

      # Jour rouge - appliquer température réduite + notification
      - conditions:
          - condition: state
            entity_id: !input tempo_sensor
            state: "Rouge"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_temperature
            data:
              temperature: !input temp_red_day
            target: !input climate_entities
          - service: !input notification_service
            data:
              message: "Jour rouge EDF : température réduite à {{ temp_red_day }}°C."

      # Réveil (entre time_wake et time_morning)
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "home"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: time
            after: !input time_wake
            before: !input time_morning
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_temperature
            data:
              temperature: !input temp_wake
            target: !input climate_entities

      # Journée (entre time_morning et time_evening)
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "home"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: time
            after: !input time_morning
            before: !input time_evening
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_temperature
            data:
              temperature: !input temp_presence
            target: !input climate_entities

      # Soirée (entre time_evening et time_night)
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "home"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: time
            after: !input time_evening
            before: !input time_night
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_temperature
            data:
              temperature: !input temp_evening
            target: !input climate_entities

      # Nuit (entre time_night et time_morning)
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "home"
          - condition: state
            entity_id: !input window_sensors
            state: "off"
          - condition: time
            after: !input time_night
            before: !input time_morning
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_temperature
            data:
              temperature: !input temp_night
            target: !input climate_entities

      # Absence - appliquer température réduite
      - conditions:
          - condition: state
            entity_id: !input presence_group
            state: "not_home"
        sequence:
          - service: climate.turn_on
            target: !input climate_entities
          - service: climate.set_temperature
            data:
              temperature: !input temp_absence
            target: !input climate_entities

    # Valeur par défaut
    default:
      - service: climate.turn_on
        target: !input climate_entities
      - service: climate.set_temperature
        data:
          temperature: !input default_temp
        target: !input climate_entities

mode: single
